Date        Hours
Winter18    15      (started project during beginning of winter quarter)
06/27/18    2.5
06/28/18    2.5
06/29/18    3.5
07/02/18    6.0
07/03/18    4.0
07/05/18    10
07/09/18    5.0
07/10/18    7.0     (reading and researching only)
07/11/18    8.5
07/12/18    6.5
07/24/18    4.5
07/25/18    6.0
07/30/18    1.0
07/31/18    7.0
08/04/18    4.0
08/05/18    11.5
08/06/18    4.0
08/08/18    10.5
08/09/18    4.0
08/29/18    5.0     (figuring out ROS api)
08/30/18    7.0     (still figuring out ROS api)
08/31/18    14.0    (finally extracted .bag file data using ROS api)
09/04/18    2.0
09/05/18    8.0
09/06/18    8.0
09/11/18    10.0    (still tuning hyperparameters)
09/12/18    11.0    (each training session takes ~3300 seconds. lowest loss: 0.56)
09/13/18    12.0    (lowest loss: 0.25)
09/14/18    12.0    (lowest loss: 0.15)
09/15/18    10.0    (lowest loss: 0.10)
09/16/18    12.0    (lowest loss: 0.023)
09/17/18    20.0    (lowest loss: 0.009
09/18/18    14.0    (lowest loss: 0.00445)
09/19/18    12.0    (changed architecture to use ReLu and now retesting hyperparameters)
09/20/18    11.0
09/22/18    4.0
09/23/18    6.0     293 hours total
09/24/18    10.0
09/25/18    10.0


Done:
-average the lines across multiple frames
-finish PyGTAV tutorial
-finish 30 day blog walkthrough
-fix re-shape error
-created cnn with save and load functions
-tweak cnn hyperparameters and add dropout nodes
-feed processed lane images to convnet
-implemented PilotNet
-collect 100,000 samples
-convert Udacity dataset from rosbag to csv
-lower learning rate and increase number of epochs to allow the model to train better
-make sure model is loading correctly. check "test" file for loading example
-added early stopping

TODO List:
-dynamic source points for BEV (bird's eye view)
    -work with 3rd person POV
-weighted average for lines
-drop outlier lanes when they're too off
-mapping out the road
-vertically stretch road
-collect samples for right and left steering

-look up "grid search" for testing hyperparameter values

IMPORTANT
-double data with horizontal flip
-use k-fold validation, Near Optimal Learning Rate BP Algorithm
-change graph so it only plots every epoch instead of every cycle
-use Grid Search to test different learning rates
-check  Cyclic Learning Rates